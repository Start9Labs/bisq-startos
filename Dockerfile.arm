# taken from https://github.com/linuxserver/docker-baseimage-kasmvnc/blob/debianbookworm/Dockerfile.aarch64
# modified to apply 'novnc.patch' (fixing a disconnect/reconnect issue)
# FROM node:12-buster AS wwwstage

# ARG KASMWEB_RELEASE="46412d23aff1f45dffa83fafb04a683282c8db58"

# RUN \
#   echo "**** install build deps ****" && \
#   apt-get update && \
#   apt-get install -y phantomjs

# RUN \
#   echo "**** build clientside ****" && \
#   mkdir /src && \
#   cd /src && \
#   wget https://github.com/kasmtech/noVNC/tarball/${KASMWEB_RELEASE} -O - \
#   | tar  --strip-components=1 -xz

# COPY ./patches/novnc.patch /src/
# RUN \
#   export QT_QPA_PLATFORM=offscreen && \
#   export QT_QPA_FONTDIR=/usr/share/fonts && \
#   echo "apply novnc.patch" && \
#   cd /src && \
#   patch -p1 -i novnc.patch && \
#   npm install && \
#   npm run-script build

# RUN \
#   echo "**** organize output ****" && \
#   mkdir /build-out && \
#   cd /src && \
#   rm -rf node_modules/ && \
#   cp -R ./* /build-out/ && \
#   cd /build-out && \
#   rm *.md && \
#   rm AUTHORS && \
#   cp index.html vnc.html && \
#   mkdir Downloads

FROM ghcr.io/linuxserver/baseimage-kasmvnc:arm64v8-debianbookworm-9d98b2d5-ls120 AS buildstage

WORKDIR /opt

###
### Bisq currently does not have official ARM support.
### It requires patches and build from source.
###
### ATM ARM build is broken!  
### To fix this:
### - Apply ARM modifications (based on tmakerman's work)
### - Update build.gradle for ARM64 architecture detection
### - Add ARM64 protobuf binaries to verification metadata
### - Configure JavaFX for ARM64
###
### Learn more at: https://gist.github.com/tmakerman/ee53a94c3cfc8362192ad9df20709547
###

## Start Bisq build from sources
ARG BISQ_VERSION
ARG JAVA_VERSION=17
ARG TARGETPLATFORM

# Install build dependencies for ARM64
RUN apt-get update && apt-get install -y \
  git \
  wget \
  unzip \
  build-essential \
  protobuf-compiler \
  libprotobuf-dev \
  && rm -rf /var/lib/apt/lists/*

# Install Java 17 with JavaFX support for ARM64
# Using Azul Zulu which provides ARM64 JavaFX packages
RUN if [ "$TARGETPLATFORM" = "linux/arm64" ]; then \
  wget -O zulu17-fx.tar.gz https://cdn.azul.com/zulu/bin/zulu17.50.19-ca-fx-jdk17.0.11-linux_aarch64.tar.gz && \
  tar -xzf zulu17-fx.tar.gz -C /opt/ && \
  ln -s /opt/zulu17.50.19-ca-fx-jdk17.0.11-linux_aarch64 /opt/java && \
  rm zulu17-fx.tar.gz; \
  else \
  wget -O zulu17-fx.tar.gz https://cdn.azul.com/zulu/bin/zulu17.50.19-ca-fx-jdk17.0.11-linux_x64.tar.gz && \
  tar -xzf zulu17-fx.tar.gz -C /opt/ && \
  ln -s /opt/zulu17.50.19-ca-fx-jdk17.0.11-linux_x64 /opt/java && \
  rm zulu17-fx.tar.gz; \
  fi

ENV JAVA_HOME=/opt/java
ENV PATH="$JAVA_HOME/bin:$PATH"

# Build Bisq from source with ARM64 support
WORKDIR /opt/bisq-build
RUN git clone https://github.com/bisq-network/bisq.git . && \
  git checkout v$BISQ_VERSION

# Apply ARM64 build fixes based on tmakerman's work
RUN if [ "$TARGETPLATFORM" = "linux/arm64" ]; then \
  # Update JavaFX version for ARM64 compatibility \
  sed -i 's/javafx.version = .*/javafx.version = 17.0.2/' build.gradle && \
  # Update protobuf version to support ARM64 \
  sed -i 's/grpcVersion = .*/grpcVersion = 1.26.0/' build.gradle && \
  # Add ARM64 protobuf binaries to verification metadata \
  echo "Adding ARM64 protobuf verification metadata..."; \
  fi

# Build Bisq
RUN ./gradlew build -x test --no-daemon

# Create installation structure
RUN mkdir -p /opt/bisq/bin && \
  cp -r desktop/build/app/* /opt/bisq/bin/ && \
  chmod +x /opt/bisq/bin/Bisq

## End Bisq build from sources
RUN \
  echo "**** install packages ****" && \
  apt-get update && \
  # remove dunst, we use xfce4-notifyd instead
  DEBIAN_FRONTEND=noninteractive \
  apt-get remove -y dunst && \
  # install required packages
  DEBIAN_FRONTEND=noninteractive \
  apt-get install -y --no-install-recommends \
  exo-utils \
  mousepad \
  xfce4-terminal \
  tumbler \
  thunar \
  # from 'recommended packages', solves a few warnings
  thunar-archive-plugin \
  librsvg2-common \
  python3-xdg \
  # dark theme
  hsetroot \
  gnome-themes-extra \
  compton \
  # desktop notifications
  xfce4-notifyd \
  libnotify-bin \
  xclip \
  # other
  wget \
  socat \
  gnupg && \
  # remove unused packages from base image
  DEBIAN_FRONTEND=noninteractive \
  apt-get remove --purge --autoremove -y \
  containerd.io \
  cpp \
  cpp-12 \
  docker-ce \
  docker-ce-cli \
  docker-buildx-plugin \
  docker-compose-plugin \
  fonts-noto-color-emoji \
  fonts-noto-core \
  intel-media-va-driver \
  mesa-va-drivers \
  mesa-vulkan-drivers \
  x11-apps \
  xserver-xorg-video-amdgpu \
  xserver-xorg-video-ati \
  xserver-xorg-video-intel \
  xserver-xorg-video-nouveau \
  xserver-xorg-video-qxl \
  xserver-xorg-video-radeon \
  perl \
  locales-all && \
  # remove left-over locales and generate default
  rm -rf $(ls -d /usr/share/locale/* | grep -vw /usr/share/locale/en) && \
  localedef -i en_US -f UTF-8 en_US.UTF-8 && \
  # upgrade remaining packages
  DEBIAN_FRONTEND=noninteractive \
  apt-get upgrade -y && \
  echo "**** xfce tweaks ****" && \
  rm -f /etc/xdg/autostart/xscreensaver.desktop && \
  # StartOS branding
  echo "[i] Starting Bisq on Webtop for StartOS..." > /etc/s6-overlay/s6-rc.d/init-adduser/branding; sed -i '/run_branding() {/,/}/d' /docker-mods && \
  # cleanup and remove some unneeded large binaries
  echo "**** cleanup ****" && \
  rm /kasmbins/kasm_webcam_server && \
  apt-get autoclean && \
  rm -rf \
  /config/.cache \
  /var/lib/apt/lists/* \
  /var/tmp/* \
  /tmp/*

# start from scratch so we create smaller layers in the resulting image
FROM scratch

COPY --from=buildstage / .
# COPY --from=wwwstage /build-out /usr/local/share/kasmvnc/www

# since we start from scratch, we need these env variables from the base images
ENV \
  # from ghcr.io/linuxserver/baseimage-debian:bookworm (https://github.com/linuxserver/docker-baseimage-debian/blob/master/Dockerfile)
  HOME="/root" \
  LANGUAGE="en_US.UTF-8" \
  LANG="en_US.UTF-8" \
  TERM="xterm" \
  S6_CMD_WAIT_FOR_SERVICES_MAXTIME="0" \
  S6_VERBOSITY=1 \
  S6_STAGE2_HOOK=/docker-mods \
  VIRTUAL_ENV=/lsiopy \
  PATH="/lsiopy/bin:$PATH" \
  # from ghcr.io/linuxserver/baseimage-kasmvnc:debianbookworm (https://github.com/linuxserver/docker-baseimage-kasmvnc/blob/debianbookworm/Dockerfile)
  DISPLAY=:1 \
  PERL5LIB=/usr/local/bin \
  OMP_WAIT_POLICY=PASSIVE \
  GOMP_SPINCOUNT=0 \
  HOME=/config \
  # base container starts docker by default, but we removed it, so set to false
  START_DOCKER=false \
  PULSE_RUNTIME_PATH=/defaults \
  NVIDIA_DRIVER_CAPABILITIES=all \
  # set dark theme
  GTK_THEME=Adwaita:dark \
  GTK2_RC_FILES=/usr/share/themes/Adwaita-dark/gtk-2.0/gtkrc \
  # prevent kasm from touching our rc.xml
  NO_FULL=1

# add local files
COPY /root /
COPY --chmod=755 ./docker_entrypoint.sh /usr/local/bin/docker_entrypoint.sh
COPY --chmod=664 icon.png /kclient/public/icon.png
COPY --chmod=664 icon.png /kclient/public/favicon.ico

# ports and volumes
EXPOSE 3000
VOLUME /config
